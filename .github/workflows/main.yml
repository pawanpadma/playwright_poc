name: Playwright Tests by File

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test:
    name: Playwright Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - testFile: playwright_automation/tests/example.spec.ts
            name: Test1
          - testFile: playwright_automation/tests/home.spec.ts
            name: Test2

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install ./playwright_automation

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run test file and capture status
        continue-on-error: true
        run: |
          set +e
          xvfb-run npx playwright test ${{ matrix.testFile }}
          STATUS=$?
          echo "Playwright exited with code $STATUS"
          if [ "$STATUS" -eq 0 ]; then
            echo "passed" > status.txt
          else
            echo "failed" > status.txt
          fi
          exit $STATUS
        working-directory: playwright_automation

      - name: Rename and zip HTML + JSON report
        run: |
          REPORT_DIR="report-${{ matrix.name }}"
          mkdir -p "$REPORT_DIR"
          mv playwright_automation/playwright-report "$REPORT_DIR/"
          mv playwright_automation/status.txt "$REPORT_DIR/"
          mv playwright_automation/report.json "$REPORT_DIR/"
          zip -r "$REPORT_DIR.zip" "$REPORT_DIR/"

      - name: Upload zipped report
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.name }}
          path: report-${{ matrix.name }}.zip

  merge-reports:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install
        working-directory: playwright_automation

      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Install jq for JSON validation
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Prepare reports directory
        run: |
          mkdir -p playwright_automation/json-results
          # Find and unzip all downloaded artifacts
          find artifacts -name '*.zip' -exec unzip -d extracted-reports {} \;
          # Verify extracted files
          find extracted-reports -name 'report.json' -exec echo "Found report: {}" \;

      - name: Merge reports
        working-directory: playwright_automation
        run: |
            # Create the proper directory structure Playwright expects
            mkdir -p all-results
            
            # Copy each report.json to a numbered subdirectory as test-results.json
            i=1
            for report in $(find json-results -name 'report.json'); do
              dir="all-results/run-$i"
              mkdir -p "$dir"
              cp "$report" "$dir/test-results.json"
              i=$((i+1))
            done
            
            # Verify the structure (debugging)
            echo "Generated directory structure:"
            tree all-results || true
            echo ""
            echo "First 3 lines of each test-results.json:"
            find all-results -name 'test-results.json' -exec sh -c 'echo "--- {} ---"; head -n 3 {}' \;
            
            # Merge reports using Playwright's built-in tool
            npx playwright merge-reports --reporter html all-results
            
            # Prepare final report directory
            mkdir -p ../merged-report
            mv playwright-report ../merged-report/

      - name: Upload merged HTML report
        uses: actions/upload-artifact@v4
        with:
          name: merged-html-report
          path: merged-report
